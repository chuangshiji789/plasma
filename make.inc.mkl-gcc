# PLASMA example make.inc, using Intel MKL and gcc
#
# PLASMA is a software package provided by:
# University of Tennessee, US,
# University of Manchester, UK.

# --------------------
# programs

CC        = gcc

ARCH      = ar
ARCHFLAGS = cr
RANLIB    = ranlib


# --------------------
# flags

# Use -fPIC to make shared (.so) and static (.a) libraries;
# can be commented out if making only static libraries.
FPIC      = -fPIC

CFLAGS    = -fopenmp $(FPIC) -O3 -std=c99 -Wall -pedantic -Wshadow -Wno-unused-function
LDFLAGS   = -fopenmp $(FPIC)

# options for MKL
CFLAGS   += -DPLASMA_WITH_MKL \
            -DMKL_Complex16="double _Complex" \
            -DMKL_Complex8="float _Complex"

# one of: aix bsd c89 freebsd generic linux macosx mingw posix solaris
lua_platform = linux

# --------------------
# PLASMA is a library in C, but can be also used from Fortran. 
# In this case, Fortran interface needs to be build.
# 0 = no  - Fortran codes will not be touched, the FC adn FFLAGS variables 
#           will not referenced
# 1 = yes - Fortran interface will be compiled and included into the library 

fortran = 1
FC        = gfortran
FFLAGS    = -fopenmp $(FPIC) -O3 --std=f2008 -Wall

# --------------------
# libraries
# This assumes $MKLROOT is set in your environment.
# Add these to your .cshrc or .bashrc, adjusting for where MKL is installed:
# in .cshrc:   source /opt/intel/bin/compilervars.csh intel64
# in .bashrc:  source /opt/intel/bin/compilervars.sh  intel64

# With gcc OpenMP (libgomp), use -lmkl_sequential or (-lmkl_gnu_thread   with MKL_NUM_THREADS=1).
# With icc OpenMP (liomp5),  use -lmkl_sequential or (-lmkl_intel_thread with MKL_NUM_THREADS=1).
LIBS      = -L$(MKLROOT)/lib -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lm -ldl

INC       = -I$(MKLROOT)/include
